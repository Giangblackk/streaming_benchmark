networks:
  streaming_benchmark_network:
    driver: bridge
volumes:
  redpanda-0: null
  grafana-storage: null
services:
  redpanda-0:
    command:
      - redpanda
      - start
      - --kafka-addr internal://0.0.0.0:9092,external://0.0.0.0:19092
      # Address the broker advertises to clients that connect to the Kafka API.
      # Use the internal addresses to connect to the Redpanda brokers'
      # from inside the same Docker network.
      # Use the external addresses to connect to the Redpanda brokers'
      # from outside the Docker network.
      - --advertise-kafka-addr internal://redpanda-0:9092,external://localhost:19092
      - --pandaproxy-addr internal://0.0.0.0:8082,external://0.0.0.0:18082
      # Address the broker advertises to clients that connect to the HTTP Proxy.
      - --advertise-pandaproxy-addr internal://redpanda-0:8082,external://localhost:18082
      - --schema-registry-addr internal://0.0.0.0:8081,external://0.0.0.0:18081
      # Redpanda brokers use the RPC API to communicate with each other internally.
      - --rpc-addr redpanda-0:33145
      - --advertise-rpc-addr redpanda-0:33145
      # Mode dev-container uses well-known configuration properties for development in containers.
      - --mode dev-container
      # Tells Seastar (the framework Redpanda uses under the hood) to use 1 core on the system.
      - --smp 1
      - --default-log-level=info
    image: docker.redpanda.com/redpandadata/redpanda:v24.1.1
    container_name: redpanda-0
    volumes:
      - redpanda-0:/var/lib/redpanda/data
    networks:
      - streaming_benchmark_network
    ports:
      - 18081:18081
      - 18082:18082
      - 19092:19092
      - 19644:9644
  console:
    container_name: redpanda-console
    image: docker.redpanda.com/redpandadata/console:v2.3.1
    networks:
      - streaming_benchmark_network
    entrypoint: /bin/sh
    command: -c 'echo "$$CONSOLE_CONFIG_FILE" > /tmp/config.yml; /app/console'
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["redpanda-0:9092"]
          schemaRegistry:
            enabled: true
            urls: ["http://redpanda-0:8081"]
        redpanda:
          adminApi:
            enabled: true
            urls: ["http://redpanda-0:9644"]
    ports:
      - 8080:8080
    depends_on:
      - redpanda-0
  data-producer-consumer:
    container_name: data-producer-consumer
    image: spark:3.5.1-python3
    build:
      context: ./spark
      dockerfile: Dockerfile
      cache_from:
        - streaming_benchmark:latest
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=changethispassword
      - AWS_REGION=us-east-1
    networks:
      - streaming_benchmark_network
    ports:
      - "15002:15002"
      - "4040:4040"
  data-pipeline-engine:
    container_name: data-pipeline-engine
    image: spark:3.5.1-python3
    build:
      context: ./spark
      dockerfile: Dockerfile
      cache_from:
        - streaming_benchmark:latest
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=changethispassword
      - AWS_REGION=us-east-1
    networks:
      - streaming_benchmark_network
    ports:
      - "15003:15002"
      - "4041:4040"
  timescaledb:
    container_name: timescaledb
    image: timescale/timescaledb:latest-pg16
    environment:
      - POSTGRES_PASSWORD=changethispassword
    networks:
      - streaming_benchmark_network
    ports:
      - "5432:5432"
  grafana:
    container_name: grafana
    image: grafana/grafana-enterprise:latest
    volumes:
      - grafana-storage:/var/lib/grafana:rw
    networks:
      - streaming_benchmark_network
    ports:
      - "3000:3000"
  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=changethispassword
      - MINIO_DOMAIN=storage
      - MINIO_REGION_NAME=us-east-1
      - MINIO_REGION=us-east-1
    networks:
      streaming_benchmark_network:
        aliases:
          - minio.minio
    ports:
      - 9001:9001
      - 9000:9000
    command: ["server", "/data", "--console-address", ":9001"]
  nessie:
    image: projectnessie/nessie:latest
    container_name: nessie
    networks:
      - streaming_benchmark_network
    ports:
      - 19120:19120
